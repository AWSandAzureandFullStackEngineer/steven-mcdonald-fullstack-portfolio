name: Terraform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Print environment variables for debugging
      run: env

    - name: Terraform Init
      working-directory: terraform/environments/production
      run: terraform init

    - name: Terraform Validate
      working-directory: terraform/environments/production
      run: terraform validate

    - name: Terraform Plan
      id: tfplan
      working-directory: terraform/environments/production
      run: terraform plan -out=tfplan

    - name: Check if plan has changes
      id: plancheck
      working-directory: terraform/environments/production
      run: |
        set -e
        terraform show -json tfplan | jq -e '.resource_changes | length > 0'
      continue-on-error: true

    - name: Terraform Destroy
      if: steps.plancheck.outcome == 'success' && github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: terraform/environments/production
      run: terraform destroy -auto-approve

    - name: Terraform Re-Init after Destroy
      if: steps.plancheck.outcome == 'success' && github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: terraform/environments/production
      run: terraform init

    - name: Terraform Re-Plan after Destroy
      if: steps.plancheck.outcome == 'success' && github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: terraform/environments/production
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: terraform/environments/production
      run: terraform apply -auto-approve tfplan

    - name: Terraform Apply (PR)
      if: github.event_name == 'pull_request'
      working-directory: terraform/environments/production
      run: terraform apply -auto-approve tfplan
