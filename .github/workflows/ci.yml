name: Continuous Integration

on:
  workflow_run:
    workflows: ["Terraform"]
    types:
      - completed

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2  # Check out the repository
      
      - name: Cache Go modules  # Cache Go modules to speed up builds
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Set up Go  # Set up Go environment
        uses: actions/setup-go@v2
        with:
          go-version: "1.22"
      
      - name: Build backend  # Build the backend Go application
        run: go build -v ./...
        working-directory: backend
      
      - name: Test backend  # Run tests for the backend
        run: go test -v ./...
        working-directory: backend

        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}  # AWS region
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}  # AWS account ID
          IMAGE_NAME_BACKEND: ${{ secrets.IMAGE_NAME_BACKEND }}
          IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key ID
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret access key
          GITHUB_RUN_NUMBER: ${{ github.run_number }}  # Unique identifier for the workflow run

      - name: Log in to AWS ECR  # Log in to AWS ECR
        run: $(aws ecr get-login --no-include-email --region $AWS_REGION)

      - name: Build Docker image for backend  # Build Docker image for the backend
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME_BACKEND:$IMAGE_TAG .
          docker tag $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME_BACKEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME_BACKEND:$GITHUB_RUN_NUMBER
      
      - name: Push Docker image for backend  # Push Docker image to AWS ECR
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME_BACKEND:$IMAGE_TAG

  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2  # Check out the repository
      
      - name: Cache Node modules  # Cache Node modules to speed up builds
        uses: actions/cache@v2
        with:
          path: ~/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Set up Node  # Set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      
      - name: Install Yarn  # Install Yarn package manager
        run: npm install -g yarn
      
      - name: Install frontend dependencies  # Install frontend dependencies using Yarn
        run: yarn install --frozen-lockfile
        working-directory: frontend
      
      - name: Build frontend  # Build the frontend application
        run: yarn build
        working-directory: frontend

      - name: Build Docker image for frontend  # Build Docker image for the frontend
        run: |
          docker build -t your-aws-account-id.dkr.ecr.your-region.amazonaws.com/frontend:latest .
          docker tag your-aws-account-id.dkr.ecr.your-region.amazonaws.com/frontend:latest your-aws-account-id.dkr.ecr.your-region.amazonaws.com/frontend:$GITHUB_RUN_NUMBER
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}  # AWS region
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}  # AWS account ID
          IMAGE_NAME_FRONTEND: ${{ secrets.IMAGE_NAME_FRONTEND }}
          IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key ID
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret access key
          GITHUB_RUN_NUMBER: ${{ github.run_number }}  # Unique identifier for the workflow run


      - name: Push Docker image for frontend  # Push Docker image to AWS ECR
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME_FRONTEND:$IMAGE_TAG
